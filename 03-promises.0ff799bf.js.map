{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAyCAQ,SAASC,cAAc,SAC/BC,iBAAiB,UArCtB,SAA0BC,GACxBA,EAAMC,iBAGN,MAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBACrCO,EAAaC,OAAOJ,EAAWK,OAC/BC,EAAYF,OAAOH,EAAUI,OAC7BE,EAASH,OAAOF,EAAYG,OAGlCtB,EAAAyB,OAAOC,KAAK,YAAYF,iBAGxB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAG/BzB,EAFiByB,EAAI,EACPP,EAAaO,EAAIJ,GAE5BK,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjByB,QAAQC,IAAI,uBAAqB3B,QAAiBC,OAClDJ,EAAAyB,OAAOM,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAEhE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClByB,QAAQC,IAAI,sBAAoB3B,QAAiBC,OACjDJ,EAAAyB,OAAOQ,QAAQ,sBAAoB9B,QAAeC,MAAU,G,CAGlEW,EAAMmB,cAAcC,QAEpBlB,EAAWK,MAAQ,GACnBJ,EAAUI,MAAQ,GAClBH,EAAYG,MAAQ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// function to create a promise with random success or failure\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// function to handle form submission and create promises\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  // get user inputs from form fields\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n  const firstDelay = Number(delayInput.value);\n  const delayStep = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  // create and display a notification to the user\n  Notify.info(`Creating ${amount} promises...`);\n\n  // create promises and handle fulfillment/rejection\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delay = firstDelay + i * delayStep;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  event.currentTarget.reset();\n  // reset the form inputs\n  delayInput.value = '';\n  stepInput.value = '';\n  amountInput.value = '';\n}\n\n// add event listener to form submit event\nconst form = document.querySelector('.form');\nform.addEventListener('submit', handleFormSubmit);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","firstDelay","Number","value","delayStep","amount","Notify","info","i","then","console","log","success","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.0ff799bf.js.map"}