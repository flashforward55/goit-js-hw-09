{"mappings":"oeAAAA,EAAA","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// function to create a promise with random success or failure\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// function to handle form submission and create promises\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  // get user inputs from form fields\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n  const firstDelay = Number(delayInput.value);\n  const delayStep = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  // create and display a notification to the user\n  Notify.info(`Creating ${amount} promises...`);\n\n  // create promises and handle fulfillment/rejection\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delay = firstDelay + i * delayStep;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  event.currentTarget.reset();\n  // reset the form inputs\n  delayInput.value = '';\n  stepInput.value = '';\n  amountInput.value = '';\n}\n"],"names":["parcelRequire"],"version":3,"file":"03-promises.4e21e7fd.js.map"}