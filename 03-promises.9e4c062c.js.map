{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAsCP,IAAMQ,EAAOC,SAASC,cAAc,SACpCF,EAAKG,iBAAiB,UAlCtB,SAA0BC,GACxBA,EAAMC,iBAGN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALd,MAAOkB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGrBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAaF,OAAOH,EAAKI,OACzBE,EAAcH,OAAOF,EAAOG,OAGlC1B,EAAA6B,OAAOC,KAAK,YAAwBC,OAAZH,EAAY,iBAGpC,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAaI,IAAK,CAGpC9B,EAFiB8B,EAAI,EACPR,EAAaQ,EAAIL,GAE5BM,MAAK,SAAAC,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MACjB+B,QAAQC,IAAI,uBAAwCL,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,OAC1DJ,EAAA6B,OAAOQ,QAAQ,uBAAwCN,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAE9DkC,OAAM,SAAAJ,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MAClB+B,QAAQC,IAAI,sBAAuCL,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,OACzDJ,EAAA6B,OAAOU,QAAQ,sBAAqCR,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAE3DoC,SAAQ,W,OAAM5B,EAAK6B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// function to create a promise with random success or failure\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// function to handle form submission and create promises\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  // get user inputs from form fields\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  const firstDelay = Number(delay.value);\n  const delaySteep = Number(step.value);\n  const amountInput = Number(amount.value);\n\n  // create and display a notification to the user\n  Notify.info(`Creating ${amountInput} promises...`);\n\n  // create promises and handle fulfillment/rejection\n  for (let i = 0; i < amountInput; i++) {\n    const position = i + 1;\n    const delay = firstDelay + i * delaySteep;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      })\n      .finally(() => form.reset());\n  }\n}\n\n// add event listener to form submit event\nconst form = document.querySelector('.form');\nform.addEventListener('submit', handleFormSubmit);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay2","step","amount","firstDelay","Number","value","delaySteep","amountInput","Notify","info","concat","i","then","param","console","log","success","catch","failure","finally","reset"],"version":3,"file":"03-promises.9e4c062c.js.map"}